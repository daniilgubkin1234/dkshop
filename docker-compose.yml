services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: shop
      POSTGRES_DB: shopdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: ["5432:5432"]

  # ────────────────────────────────────────────────────────────────
  #  API  (FastAPI + Alembic + все зависимости из backend/Dockerfile)
  # ────────────────────────────────────────────────────────────────
  api:
    build:                       # ← вместо image: python:3.12-slim
      context: ./backend         # папка, где лежит ваш Dockerfile
      dockerfile: Dockerfile     # (имя по-умолчанию; можно опустить)
    working_dir: /app            # задано в Dockerfile, но не мешает
    volumes:
      - ./backend/app/static:/app/static        # оставить, если нужна «живая» статика
      - ./backend/app:/app                      # горячий reload кода
    env_file:
      - backend/.env.production                 # JWT_SECRET и др.
    depends_on: [db]
    ports: ["8001:8001"]

  # ────────────────────────────────────────────────────────────────
  #  BOT (оставляем как есть: отдельный Dockerfile в backend/bot )
  # ────────────────────────────────────────────────────────────────
  bot:
    build:
      context: ./backend/bot
      dockerfile: Dockerfile
    working_dir: /bot
    command: python main.py
    volumes:
      - ./backend/bot:/bot
    env_file:
      - backend/bot/.env
    depends_on: [api]

  # ────────────────────────────────────────────────────────────────
  #  NODE (фронт dev-server) — без изменений
  # ────────────────────────────────────────────────────────────────
  node:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./webapp:/app
    ports: ["5173:5173"]
    command: ["npm", "run", "dev"]

volumes:
  pgdata:
