# bot/main.py
import os
import logging
import aiohttp
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    constants,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    Defaults,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN   = os.getenv("BOT_TOKEN")                       # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
API_URL     = os.getenv("API_URL",   "http://api:8001")    # FastAPI
FRONT_URL   = os.getenv("FRONT_URL", "https://dkshopbot.ru")
HTTP_TIMEOUT = aiohttp.ClientTimeout(total=5)

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s",
    level=logging.INFO,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•—ç–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! üëã\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å."
    )


def build_product_message(product: dict) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç + Web-–∫–Ω–æ–ø–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.
    """
    web_url = f"{FRONT_URL.rstrip('/')}/product/{product['id']}"

    text = (
        f"<b>{product['name']}</b>\n"
        f"–¶–µ–Ω–∞: <b>{product['price']} ‚ÇΩ</b>"
    )

    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É",
                               web_app=WebAppInfo(url=web_url))]]
    )
    return text, kb


async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.message.text.strip().lower()

    # ‚îÄ‚îÄ‚îÄ 0. –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ—á–∫–∞ ‚Äì —Å—Ä–∞–∑—É –æ—Ç—à–ª—ë–º ‚Äú–Ω–µ –ø–æ–Ω—è–ª‚Äù
    if not query:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å.")
        return

    # ‚îÄ‚îÄ‚îÄ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ‚Äú–º–æ–¥–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω‚Äù (–Ω–∞–ø—Ä–∏–º–µ—Ä ‚Äú2101-07‚Äù, ‚Äú1600-12‚Äù –∏ —Ç.–ø.)
    model_match = re.search(r"\b\d{4}-\d{2}\b", query)
    if model_match:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å –º–æ–¥–µ–ª—å—é
        # (API /products?q=2101-07)
        try:
            async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
                async with sess.get(
                        f"{API_URL}/products",
                        params={"q": model_match.group(0)}
                    ) as resp:
                    resp.raise_for_status()
                    products = await resp.json()
        except Exception:
            logging.exception("API request failed [search by model]")
            await update.message.reply_text(
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
            )
            return

        if products:
            txt, kb = build_product_message(products[0])
            await update.message.reply_text(txt, reply_markup=kb)
            return
        # –ï—Å–ª–∏ –ø–æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–∞–¥–∞–µ–º –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è FAQ

    # ‚îÄ‚îÄ‚îÄ 2. –ï—Å–ª–∏ —è–≤–Ω–æ ‚Äú–≤–æ–ø—Ä–æ—Å-—Ñ—Ä–∞–∑–∞‚Äù (FAQ)
    # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–¥–µ—Ä–∂–∏—Ç ‚Äú–∫–∞–∫‚Äù, ‚Äú—á—Ç–æ‚Äù, ‚Äú–ø–æ—á–µ–º—É‚Äù, ‚Äú–∑–∞—á–µ–º‚Äù, ‚Äú–≥–¥–µ‚Äù –∏ —Ç.–ø.
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∫—É.
    faq_keywords = (
    "–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º",
    "—Å–∫–æ–ª—å–∫–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞",
    "–º–æ–∂–Ω–æ –ª–∏", "–Ω—É–∂–Ω–æ –ª–∏", "–∫–∞–∫–∏–µ", "–∫–∞–∫–æ–µ", "–∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç–µ",
    "–¥–ª—è —á–µ–≥–æ", "–º–æ–≥—É –ª–∏", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏", "–≤ —á–µ–º –æ—Ç–ª–∏—á–∏–µ",
    "–∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏", "–≤—Ö–æ–¥—è—Ç –ª–∏", "–∫–∞–∫–æ–≥–æ"
)
    if any(query.startswith(kw + " ") or f" {kw} " in query for kw in faq_keywords):
        try:
            async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
                async with sess.get(
                    f"{API_URL}/faq",
                    params={"q": query}
                ) as resp:
                    resp.raise_for_status()
                    faqs = await resp.json()
                    if faqs:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –∏–∑ FAQ
                        await update.message.reply_text(faqs[0]["answer"])
                        return
        except Exception:
            logging.warning("FAQ API not responding")
        # –ï—Å–ª–∏ FAQ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —É–ø–∞–¥—ë–º –¥–∞–ª—å—à–µ (–ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)

    # ‚îÄ‚îÄ‚îÄ 3. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ ‚Äú–ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ‚Äù (–Ω–∞–ø—Ä–∏–º–µ—Ä ‚Äú–≥–ª—É—à–∏—Ç–µ–ª—å —Å–ø–æ—Ä—Ç‚Äù, ‚Äú–ø–∞—É–∫ —Å –≥–æ—Ñ—Ä–æ–π‚Äù)
    try:
        async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
            async with sess.get(
                f"{API_URL}/products",
                params={"q": query}
            ) as resp:
                resp.raise_for_status()
                products = await resp.json()
    except Exception:
        logging.exception("API request failed [general search]")
        await update.message.reply_text(
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
        )
        return

    if products:
        for p in products[:3]:
            txt, kb = build_product_message(p)
            await update.message.reply_text(txt, reply_markup=kb)
        return

    # ‚îÄ‚îÄ‚îÄ 4. –ù–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await update.message.reply_text("–ü–µ—Ä–µ–¥–∞—é –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É üë®‚Äçüîß")
    try:
        async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
            await sess.post(
                f"{API_URL}/questions",
                json={"user_id": update.effective_user.id, "text": query}
            )
    except Exception:
        logging.warning("Could not send question to API")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("Please set BOT_TOKEN env-var")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .defaults(Defaults(parse_mode=constants.ParseMode.HTML))
        .build()
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logging.info("Bot started")
    app.run_polling(allowed_updates=["message"])


if __name__ == "__main__":
    main()
