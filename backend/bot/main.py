# bot/main.py

import os
import re
import logging
import aiohttp

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    constants,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    Defaults,
    ContextTypes,
)

# ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# ‚îÄ‚îÄ‚îÄ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ
BOT_TOKEN   = os.getenv("BOT_TOKEN")
API_URL     = os.getenv("API_URL")     # –ù–∞–ø—Ä–∏–º–µ—Ä https://dkshopbot.ru/api
FRONT_URL   = os.getenv("FRONT_URL")   # –ù–∞–ø—Ä–∏–º–µ—Ä https://dkshopbot.ru
HTTP_TIMEOUT = aiohttp.ClientTimeout(total=10)

# ‚îÄ‚îÄ‚îÄ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é (persistent keyboard) ‚îÄ‚îÄ‚îÄ
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        ["üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã"],
        ["‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏",       "üì£ –ù–∞—à –∫–∞–Ω–∞–ª"],
        ["üôã‚Äç‚ôÇÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# ‚îÄ‚îÄ‚îÄ –ü–æ–º–æ—â–Ω–∏–∫: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚îÄ‚îÄ‚îÄ
def build_product_message(product: dict) -> tuple[str, InlineKeyboardMarkup]:
    url  = f"{FRONT_URL.rstrip('/')}/product/{product['id']}"
    text = f"<b>{product['name']}</b>\n–¶–µ–Ω–∞: <b>{product['price']} ‚ÇΩ</b>"
    kb   = InlineKeyboardMarkup([[
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", web_app=WebAppInfo(url=url))
    ]])
    return text, kb

# ‚îÄ‚îÄ‚îÄ /start: –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º MAIN_MENU ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_MENU
    )

# ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    text_lower = update.message.text.strip().lower()

    # 0) –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∏–∑ persistent-–º–µ–Ω—é
    if text_lower == "–æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω":
        await update.message.reply_text(
            "üöÄ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=FRONT_URL))
            ]])
        )
        return


    if text_lower == "–æ –∫–æ–º–ø–∞–Ω–∏–∏":
        await update.message.reply_text(
            "‚ÑπÔ∏è DK PROduct ‚Äî —ç—Ç–æ –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –∑–∞–ø—á–∞—Å—Ç—è–º –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º."
        )
        return

    if text_lower.startswith("–≥—Ä—É–ø–ø–∞ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ"):
        await update.message.reply_text(
            "üì£ –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: https://vk.com/dk_pro_tuning?from=groups"
        )
        return

    if "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" in text_lower:
        await update.message.reply_text(
            "üôã‚Äç‚ôÇÔ∏è –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://t.me/share/url?url=https://t.me/your_bot"
        )
        return

    # 1) –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = text_lower.strip()
    if not query:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å.")
        return

    # 2) –ü–æ–∏—Å–∫ –ø–æ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2101-07)
    model_match = re.search(r"\b\d{4}-\d{2}\b", query)
    if model_match:
        try:
            async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
                async with sess.get(
                    f"{API_URL}/products",
                    params={"q": model_match.group(0)}
                ) as resp:
                    resp.raise_for_status()
                    products = await resp.json()
        except Exception:
            logging.exception("API request failed [search by model]")
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
            return

        if products:
            txt, kb = build_product_message(products[0])
            await update.message.reply_text(txt, reply_markup=kb)
            return

    # 3) –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ FAQ
    try:
        async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
            async with sess.get(f"{API_URL}/faq", params={"q": query}) as resp:
                resp.raise_for_status()
                faqs = await resp.json()
                if faqs:
                    # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∏–∑ FAQ
                    await update.message.reply_text(faqs[0]["answer"])
                    return
    except Exception:
        logging.warning("FAQ API not responding")

    # 4) –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    try:
        async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
            async with sess.get(f"{API_URL}/products", params={"q": query}) as resp:
                resp.raise_for_status()
                products = await resp.json()
    except Exception:
        logging.exception("API request failed [general search]")
        await update.message.reply_text("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
        return

    if products:
        txt, kb = build_product_message(products[0])
        await update.message.reply_text(txt, reply_markup=kb)
        return

    # 5) –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await update.message.reply_text("–ü–µ—Ä–µ–¥–∞—é –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É üë®‚Äçüîß")
    try:
        async with aiohttp.ClientSession(timeout=HTTP_TIMEOUT) as sess:
            await sess.post(f"{API_URL}/questions", json={"question": update.message.text})
    except Exception:
        logging.exception("Failed to send question to manager API")


# ‚îÄ‚îÄ‚îÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ
def main() -> None:
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .defaults(Defaults(parse_mode=constants.ParseMode.HTML))
        .build()
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logging.info("Bot started")
    app.run_polling(allowed_updates=["message"])


if __name__ == "__main__":
    main()
